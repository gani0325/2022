# 드래곤 커브

# 드래곤 커브는 다음과 같은 세 가지 속성으로 이루어져 있으며, 이차원 좌표 평면 위에서 정의
# 좌표 평면의 x축은 → 방향, y축은 ↓ 방향이다.
#     시작 점
#     시작 방향
#     세대

# 즉, K(K > 1)세대 드래곤 커브는 K-1세대 드래곤 커브를 끝 점을 기준으로 90도 시계 방향 회전 시킨 다음,
# 그것을 끝 점에 붙인 것

# 크기가 100×100인 격자 위에 드래곤 커브가 N개 있다.
# 크기가 1×1인 정사각형의 네 꼭짓점이 모두 드래곤 커브의 일부인 정사각형의 개수를 구하는 프로그램을 작성
#     격자의 좌표는 (x, y)로 나타내며, 0 ≤ x ≤ 100, 0 ≤ y ≤ 100만 유효한 좌표

# 첫째 줄에 드래곤 커브의 개수 N(1 ≤ N ≤ 20)이 주어진다. 
# 둘째 줄부터 N개의 줄에는 드래곤 커브의 정보가 주어진다. 
#     드래곤 커브의 정보는 네 정수 x, y, d, g로 이루어져 있다. 
#     x와 y는 드래곤 커브의 시작 점, d는 시작 방향, g는 세대이다. 
#     (0 ≤ x, y ≤ 100, 0 ≤ d ≤ 3, 0 ≤ g ≤ 10)
# 입력으로 주어지는 드래곤 커브는 격자 밖으로 벗어나지 않는다. 드래곤 커브는 서로 겹칠 수 있다.
# 방향은 0, 1, 2, 3 중 하나
#     0: x좌표가 증가하는 방향 (→)
#     1: y좌표가 감소하는 방향 (↑)
#     2: x좌표가 감소하는 방향 (←)
#     3: y좌표가 증가하는 방향 (↓)

# 첫째 줄에 크기가 1×1인 정사각형의 네 꼭짓점이 모두 드래곤 커브의 일부인 것의 개수를 출력    

N = int(input())
board = [[0] * 101 for _ in range(101)]

dx = [1, 0, -1, 0]
dy = [0, -1, 0, 1]

for _ in range(N) :
    # x와 y는 드래곤 커브의 시작 점, d는 시작 방향, g는 세대
    x, y, d, g = map(int, input().split())
    board[x][y] = 1
    q = [d]             # 이전세대 방향에다가 1을 더하고 이를 뒤집어서 이동시킬 방향

    for _ in range(g) :
        temp = []          # temp은 이전세대 방향을 기록
        for i in range(len(q)) :
            temp.append((q[-i - 1] + 1) % 4)
        q.extend(temp)

    for j in q :
        nx = x + dx[j]
        ny = y + dy[j]
        board[nx][ny] = 1
        x = nx
        y = ny        
    
result = 0
    
for i in range(100) :
    for j in range(100) :
        if board[i][j] and board[i+1][j]  and board[i][j+1] and board[i+1][j+1] :
            result += 1

print(result) 
