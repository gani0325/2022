# 나무 재테크

# 부동산 투자로 억대의 돈을 번 상도는 최근 N×N 크기의 땅을 구매했다
# 손쉬운 땅 관리를 위해 땅을 1×1 크기의 칸으로 나누어 놓았다.
#  각각의 칸은 (r, c), r은 가장 위에서부터 떨어진 칸의 개수, c는 가장 왼쪽으로부터 떨어진 칸의 개수
# r과 c는 1부터 시작

# 땅의 양분을 조사하는 로봇 S2D2를 만들었다. 
# S2D2는 1×1 크기의 칸에 들어있는 양분을 조사해 상도에게 전송하고, 모든 칸에 대해서 조사
# 가장 처음에 양분은 모든 칸에 5만큼 들어있다.

# 나무 재테크란 작은 묘목을 구매해 어느정도 키운 후 팔아서 수익을 얻는 재테크
# 큰 돈을 벌기 위해 M개의 나무를 구매해 땅에 심었다. 
# 같은 1×1 크기의 칸에 여러 개의 나무가 심어져 있을 수도 있다.
# 이 나무는 사계절을 보내며, 아래와 같은 과정을 반복한다.
    # 봄에는 나무가 자신의 나이만큼 양분을 먹고, 나이가 1 증가
        # 각각의 나무는 나무가 있는 1×1 크기의 칸에 있는 양분만 먹을 수 있다. 
        # 하나의 칸에 여러 개의 나무가 있다면, 나이가 어린 나무부터 양분을 먹는다. 
        # 만약, 땅에 양분이 부족해 자신의 나이만큼 양분을 먹을 수 없는 나무는 양분을 먹지 못하고 즉시 죽는다.
    # 여름에는 봄에 죽은 나무가 양분으로 변하게 된다. 
        # 각각의 죽은 나무마다 나이를 2로 나눈 값이 나무가 있던 칸에 양분으로 추가 (소수점 아래는 버린다.)
    # 가을에는 나무가 번식한다.
        # 번식하는 나무는 나이가 5의 배수이어야 하며, 인접한 8개의 칸에 나이가 1인 나무가 생긴다. 
        # 어떤 칸 (r, c)와 인접한 칸은 (r-1, c-1), (r-1, c), (r-1, c+1), (r, c-1), (r, c+1), (r+1, c-1), (r+1, c), (r+1, c+1)
        # 상도의 땅을 벗어나는 칸에는 나무가 생기지 않는다.
    # 겨울에는 S2D2가 땅을 돌아다니면서 땅에 양분을 추가한다. 
        # 각 칸에 추가되는 양분의 양은 A[r][c]이고, 입력으로 주어진다.

# K년이 지난 후 상도의 땅에 살아있는 나무의 개수를 구하는 프로그램을 작성

# 첫째 줄에 N, M, K가 주어진다.
# 둘째 줄부터 N개의 줄에 A배열의 값이 주어진다. r번째 줄의 c번째 값은 A[r][c]이다.
# 다음 M개의 줄에는 상도가 심은 나무의 정보를 나타내는 세 정수 x, y, z가 주어진다.
    # 처음 두 개의 정수는 나무의 위치 (x, y)를 의미하고, 마지막 정수는 그 나무의 나이를 의미한다.

# 첫째 줄에 K년이 지난 후 살아남은 나무의 수를 출력

# 1) BFS
from collections import deque

# N크기, M개의 나무를 구매, K년 후
N, M, K = map(int, input().split())

arr = [[5] * N for _ in range(N)]

# S2D2가 각 칸에 추가되는 양분의 양
S2D2 = []
for _ in range(N) :
    S2D2.append(list(map(int, input().split())))

tree = [[deque() for _ in range(N)] for _ in range(N)]
for _ in range(M) :
    # 나무의 위치 (x, y)를 의미하고, z 는 나무의 나이
    x, y, z = map(int, input().split())
    tree[x-1][y-1].append(z)

#  (r, c)와 인접한 칸은 (r-1, c-1), (r-1, c), (r-1, c+1), (r, c-1), (r, c+1), (r+1, c-1), (r+1, c), (r+1, c+1)
dx = [-1, -1, -1, 0, 0, 1, 1, 1]
dy = [-1, 0, 1, -1, 1, -1, 0, 1]

while K > 0:
    # 봄
    for i in range(N) :
        for j in range(N) :
            tree_len = len(tree[i][j])

            for q in range(tree_len) :
                # 자신의 나이만큼 양분을 먹고, 나이가 1 증가
                if arr[i][j] >= tree[i][j][q] :
                    arr[i][j] -= tree[i][j][q]
                    tree[i][j][q] += 1
                # 여름
                # 각각의 죽은 나무마다 나이를 2로 나눈 값이 나무가 있던 칸에 양분으로 추
                else :
                    for _ in range(q, tree_len) :
                        arr[i][j] += tree[i][j].pop() // 2
                    break
    # 가을
    # 번식하는 나무는 나이가 5의 배수이어야 하며, 인접한 8개의 칸에 나이가 1인 나무가 생긴다
    for i in range(N) :
        for j in range(N) :
            for e in tree[i][j] :
                if e % 5 == 0 :
                    for h in range(8) :
                        nx = i + dx[h]
                        ny = j + dy[h]
                        if 0 <= nx < N and 0 <= ny < N :
                            tree[nx][ny].appendleft(1)  # 데크 왼쪽에 x 추가
            # 겨울
            # S2D2가 땅을 돌아다니면서 땅에 양분을 추가
            arr[i][j] += S2D2[i][j]
    K -= 1

result = 0
 
for i in range(N) :
    for j in range(N) :
        result += len(tree[i][j])
print(result)        