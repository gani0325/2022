# 철수의 토마토 농장에서는 토마토를 보관하는 큰 창고를 가지고 있다.
# 토마토는 아래의 그림과 같이 격자모양 상자의 칸에 하나씩 넣은 다음, 
# 상자들을 수직으로 쌓아 올려서 창고에 보관

# 창고에 보관되는 토마토들 중에는 잘 익은 것도 있지만, 아직 익지 않은 토마토들도 있을 수 있다
# 보관 후 하루가 지나면, 익은 토마토들의 인접한 곳에 있는 익지 않은 토마토들은 익은 토마토의 영향을 받아 익게 된다.

# 하나의 토마토에 인접한 곳은 위, 아래, 왼쪽, 오른쪽, 앞, 뒤 여섯 방향에 있는 토마토를 의미
# 대각선 방향에 있는 토마토들에게는 영향을 주지 못하며, 토마토가 혼자 저절로 익는 경우는 없다고 가정

# 철수는 창고에 보관된 토마토들이 며칠이 지나면 다 익게 되는지 그 최소 일수를 알고 싶어 한다.
# 토마토를 창고에 보관하는 격자모양의 상자들의 크기와 익은 토마토들과 익지 않은 토마토들의 정보가 주어졌을 때,
#  며칠이 지나면 토마토들이 모두 익는지, 그 최소 일수를 구하는 프로그램을 작성

# 단, 상자의 일부 칸에는 토마토가 들어있지 않을 수도 있다.

# 첫 줄에는 상자의 크기를 나타내는 두 정수 M,N과 쌓아올려지는 상자의 수를 나타내는 H가 주어진다
# M은 상자의 가로 칸의 수, N은 상자의 세로 칸의 수를 나타낸다. 
# 단, 2 ≤ M ≤ 100, 2 ≤ N ≤ 100, 1 ≤ H ≤ 100 이다. 

# 둘째 줄부터는 가장 밑의 상자부터 가장 위의 상자까지에 저장된 토마토들의 정보가 주어진다.
# 즉, 둘째 줄부터 N개의 줄에는 하나의 상자에 담긴 토마토의 정보가 주어진다. 
# 각 줄에는 상자 가로줄에 들어있는 토마토들의 상태가 M개의 정수로 주어진다. 
# 정수 1은 익은 토마토, 정수 0 은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸
# 이러한 N개의 줄이 H번 반복하여 주어진다.
# 토마토가 하나 이상 있는 경우만 입력으로 주어진다.

# 토마토가 모두 익을 때까지 최소 며칠이 걸리는지를 계산해서 출력
# 만약, 저장될 때부터 모든 토마토가 익어있는 상태이면 0을 출력
# 토마토가 모두 익지는 못하는 상황이면 -1을 출력

# 1) BFS
from collections import deque

M, N, H = map(int, input().split())
graph = []
day = 0

# 3차원 배열 만들기
for _ in range(H) :
    temp = []
    for _ in range(N) :
        temp.append(list(map(int, input().split())))
    graph.append(temp)

move = [(1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, -1, 0), (0, 0, 1), (0, 0, -1)]

queue = deque()

# 익은 토마토 queue
for i in range(H) :
    for j in range(N) :
        for k in range(M) :
            # 잘 익은 토마토라면
            if graph[i][j][k] == 1 :
                queue.append((i, j, k))

while queue :
    i, j, k = queue.popleft()

    for di, dj, dk in move :
        ni = i + di
        nj = j + dj
        nk = k + dk

        if 0 <= ni < H and 0 <= nj < N and 0 <= nk < M and graph[ni][nj][nk] == 0:
            # 안 익었다면
            graph[ni][nj][nk] = graph[i][j][k] + 1      # 하루 지남
            queue.append((ni, nj, nk))

for i in graph :
    for j in i :
        for k in j :
            if k == 0 :
                print(-1)
                exit()

        day = max(day, max(j))
            
print(day - 1)             

# input
# 5 3 2
# 0 0 0 0 0
# 0 0 0 0 0
# 0 0 0 0 0
# 0 0 0 0 0
# 0 0 1 0 0
# 0 0 0 0 0

# output
# 4






