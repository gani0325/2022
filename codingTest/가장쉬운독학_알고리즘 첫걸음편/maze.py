# 미로 탐험
# 벽을 9, 통로를 0, 골을 1, 이통할 때 통과한 통로를 2로 덮어쓰기
# 시작 지점에서 목표 지점가지 가는 경로 찾기

# 1. 너비 우선 탐색
# : 상하좌우로 움직이면서 조사하고 한 번 검색된 결과는 다시 탐색하지 않는다

# maze = [
#     [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
#     [9, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 9],
#     [9, 0, 9, 0, 0, 0, 9, 9, 0, 9, 9, 9],
#     [9, 0, 9, 9, 0, 9, 0, 0, 0, 9, 0, 9],
#     [9, 0, 0, 0, 9, 0, 0, 9, 9, 0, 9, 9],
#     [9, 9, 9, 0, 0, 9, 0, 9, 0, 0, 0, 9],
#     [9, 0, 0, 0, 9, 0, 9, 0, 0, 9, 1, 9],
#     [9, 0, 9, 0, 0, 0, 0, 9, 0, 0, 9, 9],
#     [9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9],
#     [9, 0, 9, 0, 9, 0, 9, 0, 0, 9, 0, 9],
#     [9, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9],
#     [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
# ]

# # 시작 위치(x좌표, y좌표, 이동 횟수)를 설정
# pos = [[1, 1, 0]]

# while len(pos) > 0:
#     x, y, depth = pos.pop(0)

#     # 골에 도달하면 종료
#     if maze[x][y] == 1:
#         print(depth)
#         break

#     # 탐색 완료 설정
#     maze[x][y] = 2

#     # 상하좌우 탐색
#     if maze[x - 1][y] < 2:
#         pos.append([x - 1, y, depth + 1])       # 이동 횟수 늘려 왼쪽을 리스트에 추가
#     if maze[x + 1][y] < 2:
#         pos.append([x + 1, y, depth + 1])       # 이동 횟수 늘려 오른쪽을 리스트에 추가
#     if maze[x][y - 1] < 2:
#         pos.append([x, y - 1, depth + 1])       # 이동 횟수 늘려 아래쪽을 리스트에 추가
#     if maze[x][y + 1] < 2:
#         pos.append([x, y + 1, depth + 1])       # 이동 횟수 늘려 위쪽을 리스트에 추가


# # result
# # 28



# 2. 깊이 우선 탐색
# : 탐색할 수 있는 곳가지 나아가다가 막히면 돌아와서 다음 경로 검색


maze = [
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 9],
    [9, 0, 9, 0, 0, 0, 9, 9, 0, 9, 9, 9],
    [9, 0, 9, 9, 0, 9, 0, 0, 0, 9, 0, 9],
    [9, 0, 0, 0, 9, 0, 0, 9, 9, 0, 9, 9],
    [9, 9, 9, 0, 0, 9, 0, 9, 0, 0, 0, 9],
    [9, 0, 0, 0, 9, 0, 9, 0, 0, 9, 1, 9],
    [9, 0, 9, 0, 0, 0, 0, 9, 0, 0, 9, 9],
    [9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9],
    [9, 0, 9, 0, 9, 0, 9, 0, 0, 9, 0, 9],
    [9, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
]

# 시작 위치(x좌표, y좌표, 이동 횟수)를 설정
def search(x, y, depth) :
    # 골에 도달하면 종료
    if maze[x][y] == 1:
        print(depth)
        exit()

    # 탐색 완료 설정
    maze[x][y] = 2

    # 상하좌우 탐색
    if maze[x - 1][y] < 2:
        search(x - 1, y, depth + 1)       # 이동 횟수 늘려 왼쪽을 리스트에 추가
    if maze[x + 1][y] < 2:
        search(x + 1, y, depth + 1)       # 이동 횟수 늘려 오른쪽을 리스트에 추가
    if maze[x][y - 1] < 2:
        search(x, y - 1, depth + 1)       # 이동 횟수 늘려 아래쪽을 리스트에 추가
    if maze[x][y + 1] < 2:
        search(x, y + 1, depth + 1)       # 이동 횟수 늘려 위쪽을 리스트에 추가

    # 탐색 전으로 돌리기
    maze[x][y] = 0

# 시작 위치에서 출발
search(1, 1, 0)

# result
# 28